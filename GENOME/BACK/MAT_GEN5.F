C     THIS SUBROUTINE WILL GENERATE THE TAKE OF MATCHES BETWEEN PROB'S AND
C       FRAG'S

      SUBROUTINE MATGEN (PLEN, PNUM, FLEN, FNUM, MAXNUM, 
     1                   MAT_TAB, FRAG, SEQ, SEQ_LEN, HIGH, LOW)

      INTEGER PLEN, PNUM, FLEN, FNUM, COUNT, SEQ_LEN
      INTEGER BASECONV, FRAG(FNUM), POSIT, HIGH, LOW
      LOGICAL MAT_TAB(MAXNUM, PNUM)
      CHARACTER*(*) SEQ

      DO 100 COUNT = 1, (SEQ_LEN-PLEN+1)
        POSIT = BASECONV(SEQ(COUNT:(COUNT+PLEN-1)),PLEN)+1
        CALL BINSRCH (COUNT, HIGH, LOW, FRAG, FNUM, FLEN,
     1           PLEN, MAT_TAB, MAXNUM, POSIT)
  100 CONTINUE

      RETURN
      END


      SUBROUTINE BINSRCH (COUNT, HIGH, LOW, FRAG, FNUM, 
     1                    FLEN, PLEN, MAT_TAB, MAXNUM, POSIT)
      INTEGER COUNT, HIGH, LOW, FNUM, FRAG(FNUM), POSIT, 
     1        LOOP1, LOOP2, MIDLOOP, PLEN, FLEN, MAXNUM
      LOGICAL MAT_TAB (MAXNUM, PNUM)

      LOOP1 = COUNT/HIGH
      LOOP2 = COUNT/LOW + 1
  100 MIDLOOP = (LOOP1+LOOP2)/2

      IF (MIDLOOP .EQ. 0) MIDLOOP = 1
      IF (MIDLOOP .EQ. 1) GOTO 200

      IF (FRAG(MIDLOOP) .LT. COUNT) THEN
        IF (FRAG(MIDLOOP+1) .LE. COUNT) THEN
          LOOP1 = MID
          GO TO 100
         ELSE
          GO TO 200
        END IF
      END IF
      IF (FRAG(MID) .GT. COUNT) THEN
        LOOP2 = MID
        GO TO 100
      END IF

  200 IF (FRAG(LOOP1) .LE. COUNT) THEN
       IF (FRAG(LOOP1+FLEN-1) .GE. (COUNT+PLEN-1)) THEN
        MAT_TAB(LOOP1, POSIT) = .TRUE.     
        LOOP1 = LOOP1 + 1
        GO TO 200
       END IF
      END IF
      
      RETURN
      
      END